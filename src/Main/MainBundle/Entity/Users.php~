<?php

namespace Main\MainBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Validator\Mapping\ClassMetadata;
use Symfony\Component\Validator\Constraints\Length;
use Symfony\Component\Validator\Constraints\NotBlank;
use Symfony\Component\Validator\Constraints\Email;
use Symfony\Component\Validator\Constraints\Type;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * @ORM\Entity(repositoryClass="Main\MainBundle\Entity\Repository\UsersRepository")
 * @ORM\Table(name="users")
 * @ORM\HasLifecycleCallbacks()
 */
class Users implements UserInterface
{
    public function __construct()
    {
        $this->setCreatedAt(new \DateTime());
    }
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $username;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $password;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $firstname;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $lastname;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $email;

    /**
     * @ORM\Column(type="string", length=255)
     */
    protected $mobile;

    /**
     * @ORM\Column(type="boolean")
     */
    protected $gender;

    /**
     * @ORM\ManyToOne(targetEntity="Roles")
     * @ORM\JoinColumn(name="role_id", referencedColumnName="id")
     */
    protected $roles;

    /**
     * @ORM\Column(type="boolean")
     */
    protected $activated;

    /**
     * @ORM\Column(name="activation_key", type="string", length=40)
     */
    protected $activationKey;
    
    /**
     * @ORM\OneToOne(targetEntity="Addresses")
     * @ORM\JoinColumn(name="billing_address_id", referencedColumnName="id")
     */
    protected $billingAddress;

    /**
     * @ORM\OneToOne(targetEntity="Addresses")
     * @ORM\JoinColumn(name="shipping_address_id", referencedColumnName="id")
     */
    protected $shippingAddress;

     /**
     * @ORM\Column(name="created_at", type="datetime")
     */
    protected $createdAt;

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set username
     *
     * @param string $username
     * @return Users
     */
    public function setUsername($username)
    {
        $this->username = $username;
    
        return $this;
    }

    /**
     * Get username
     *
     * @return string 
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * Set password
     *
     * @param string $password
     * @return Users
     */
    public function setPassword($password)
    {
        $this->password = $password;
    
        return $this;
    }

    /**
     * Get password
     *
     * @return string 
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set firstname
     *
     * @param string $firstname
     * @return Users
     */
    public function setFirstname($firstname)
    {
        $this->firstname = $firstname;
    
        return $this;
    }

    /**
     * Get firstname
     *
     * @return string 
     */
    public function getFirstname()
    {
        return $this->firstname;
    }

    /**
     * Set lastname
     *
     * @param string $lastname
     * @return Users
     */
    public function setLastname($lastname)
    {
        $this->lastname = $lastname;
    
        return $this;
    }

    /**
     * Get lastname
     *
     * @return string 
     */
    public function getLastname()
    {
        return $this->lastname;
    }

    /**
     * Set email
     *
     * @param string $email
     * @return Users
     */
    public function setEmail($email)
    {
        $this->email = $email;
    
        return $this;
    }

    /**
     * Get email
     *
     * @return string 
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set phone
     *
     * @param string $phone
     * @return Users
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;
    
        return $this;
    }

    /**
     * Get phone
     *
     * @return string 
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Set gender
     *
     * @param boolean $gender
     * @return Users
     */
    public function setGender($gender)
    {
        $this->gender = $gender;
    
        return $this;
    }

    /**
     * Get gender
     *
     * @return boolean 
     */
    public function getGender()
    {
        return $this->gender;
    }

    /**
     * Set activated
     *
     * @param boolean $activated
     * @return Users
     */
    public function setActivated($activated)
    {
        $this->activated = $activated;
    
        return $this;
    }

    /**
     * Get activated
     *
     * @return boolean 
     */
    public function getActivated()
    {
        return $this->activated;
    }

    /**
     * Set activationKey
     *
     * @param string $activationKey
     * @return Users
     */
    public function setActivationKey($activationKey)
    {
        $this->activationKey = $activationKey;
    
        return $this;
    }

    /**
     * Get activationKey
     *
     * @return string 
     */
    public function getActivationKey()
    {
        return $this->activationKey;
    }

    /**
     * Set createdAt
     *
     * @param \DateTime $createdAt
     * @return Users
     */
    public function setCreatedAt($createdAt)
    {
        $this->createdAt = $createdAt;
    
        return $this;
    }

    /**
     * Get createdAt
     *
     * @return \DateTime 
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * Set roles
     *
     * @param \Main\MainBundle\Entity\Roles $roles
     * @return Users
     */
    public function setRoles(\Main\MainBundle\Entity\Roles $roles = null)
    {
        $this->roles = $roles;
    
        return $this;
    }

    /**
     * Get roles
     *
     * @return \Main\MainBundle\Entity\Roles 
     */
    public function getRoles()
    {
        return $this->roles;
    }

    /**
     * Set billingAddress
     *
     * @param \Main\MainBundle\Entity\Addresses $billingAddress
     * @return Users
     */
    public function setBillingAddress(\Main\MainBundle\Entity\Addresses $billingAddress = null)
    {
        $this->billingAddress = $billingAddress;
    
        return $this;
    }

    /**
     * Get billingAddress
     *
     * @return \Main\MainBundle\Entity\Addresses 
     */
    public function getBillingAddress()
    {
        return $this->billingAddress;
    }

    /**
     * Set shippingAddress
     *
     * @param \Main\MainBundle\Entity\Addresses $shippingAddress
     * @return Users
     */
    public function setShippingAddress(\Main\MainBundle\Entity\Addresses $shippingAddress = null)
    {
        $this->shippingAddress = $shippingAddress;
    
        return $this;
    }

    /**
     * Get shippingAddress
     *
     * @return \Main\MainBundle\Entity\Addresses 
     */
    public function getShippingAddress()
    {
        return $this->shippingAddress;
    }
    public static function loadValidatorMetadata(ClassMetadata $metadata)
    {
        $required_msg = 'This is a required field.';
        $metadata->addPropertyConstraint('firstname', new NotBlank(array(
            'message' => $required_msg
        )));
        $metadata->addPropertyConstraint('lastname', new NotBlank(array(
            'message' => $required_msg
        )));
        $metadata->addPropertyConstraint('email', new NotBlank(array(
            'message' => $required_msg
        )));
        $metadata->addPropertyConstraint('email', new Email(array('message'=>'This email address is not valid.')));
        $metadata->addConstraint(new UniqueEntity(array('fields'=>'email', 'message'=>'There is another account for this email address.')));
        $metadata->addPropertyConstraint('username', new NotBlank(array(
            'message' => $required_msg
        )));
        $metadata->addConstraint(new UniqueEntity(array('fields'=>'username', 'message'=>'This username already exists. Please insert another.')));
        $metadata->addPropertyConstraint('mobile', new Type(array('type'=>'numeric','message'=>'This mobile number is invalid.')));
        $metadata->addPropertyConstraint('mobile', new Length(array('min'=>'10','max'=>'10','exactMessage'=>'This mobile number must contain {{ limit }} digits.')));
        $metadata->addPropertyConstraint('password', new NotBlank(array(
            'message' => $required_msg
        )));
        $metadata->addPropertyConstraint('password', new Length(array('min'=>'6','minMessage'=>'The password must have {{ limit }} or more characters.')));
    }

    /**
     * Set mobile
     *
     * @param string $mobile
     * @return Users
     */
    public function setMobile($mobile)
    {
        $this->mobile = $mobile;
    
        return $this;
    }

    /**
     * Get mobile
     *
     * @return string 
     */
    public function getMobile()
    {
        return $this->mobile;
    }
    /**
     * @inheritDoc
     */
    public function getSalt()
    {
        return $this->salt;
    }
    /**
     * @inheritDoc
     */
    public function eraseCredentials()
    {
    }
}